import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  Brain, 
  TrendingUp, 
  AlertTriangle, 
  CheckCircle, 
  Info,
  Zap,
  Target,
  Lightbulb,
  RefreshCw
} from 'lucide-react';
import aiService from '../services/aiService';

const AIInsights = ({ inventoryData, onRefresh }) => {
  const [insights, setInsights] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    generateInsights();
  }, [inventoryData]);

  const generateInsights = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      const aiInsights = await aiService.generateInventoryInsights(inventoryData);
      setInsights(aiInsights);
    } catch (err) {
      setError('Failed to generate AI insights');
      console.error('AI insights error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const getInsightIcon = (type) => {
    switch (type) {
      case 'success': return <CheckCircle className="h-5 w-5 text-green-400" />;
      case 'warning': return <AlertTriangle className="h-5 w-5 text-yellow-400" />;
      case 'danger': return <AlertTriangle className="h-5 w-5 text-red-400" />;
      case 'info': return <Info className="h-5 w-5 text-blue-400" />;
      default: return <Lightbulb className="h-5 w-5 text-indigo-400" />;
    }
  };

  const getInsightColor = (type) => {
    switch (type) {
      case 'success': return 'from-green-600/20 to-green-800/20 border-green-500/50';
      case 'warning': return 'from-yellow-600/20 to-yellow-800/20 border-yellow-500/50';
      case 'danger': return 'from-red-600/20 to-red-800/20 border-red-500/50';
      case 'info': return 'from-blue-600/20 to-blue-800/20 border-blue-500/50';
      default: return 'from-indigo-600/20 to-indigo-800/20 border-indigo-500/50';
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return 'bg-red-600 text-white';
      case 'medium': return 'bg-yellow-600 text-white';
      case 'low': return 'bg-blue-600 text-white';
      default: return 'bg-gray-600 text-white';
    }
  };

  if (isLoading) {
    return (
      <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-600 p-8">
        <div className="flex items-center justify-center">
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
            className="mr-3"
          >
            <Brain className="h-6 w-6 text-indigo-400" />
          </motion.div>
          <span className="text-white font-semibold">AI is analyzing your inventory...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-600/20 border border-red-500 p-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <AlertTriangle className="h-5 w-5 text-red-400" />
            <span className="text-red-300 font-semibold">AI Insights Unavailable</span>
          </div>
          <button
            onClick={generateInsights}
            className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded transition-colors"
          >
            Retry
          </button>
        </div>
        <p className="text-red-200 mt-2">{error}</p>
      </div>
    );
  }

  if (!insights) return null;

  return (
    <motion.div
      className="space-y-8"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6 }}
    >
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="bg-indigo-600 p-2 rounded-lg">
            <Brain className="h-6 w-6 text-white" />
          </div>
          <div>
            <h3 className="text-2xl font-bold text-white">AI-Powered Insights</h3>
            <p className="text-gray-400">Generated by advanced machine learning analysis</p>
          </div>
        </div>
        <motion.button
          onClick={() => {
            generateInsights();
            onRefresh?.();
          }}
          className="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg font-semibold transition-all flex items-center space-x-2"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <RefreshCw className="h-4 w-4" />
          <span>Refresh</span>
        </motion.button>
      </div>

      {/* Key Insights */}
      {insights.insights && insights.insights.length > 0 && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {insights.insights.map((insight, index) => (
            <motion.div
              key={index}
              className={`bg-gradient-to-br ${getInsightColor(insight.type)} border p-6 rounded-lg`}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: index * 0.1 }}
              whileHover={{ scale: 1.02 }}
            >
              <div className="flex items-start space-x-3">
                {getInsightIcon(insight.type)}
                <div className="flex-1">
                  <h4 className="font-bold text-white mb-2">{insight.title}</h4>
                  <p className="text-gray-200 text-sm mb-3">{insight.description}</p>
                  {insight.actionable && (
                    <div className="bg-white/10 p-3 rounded border-l-4 border-white/30">
                      <p className="text-white text-sm font-medium">
                        ðŸ’¡ {insight.actionable}
                      </p>
                    </div>
                  )}
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      )}

      {/* Predictions */}
      {insights.predictions && (
        <motion.div
          className="bg-gray-800/50 backdrop-blur-sm border border-gray-600 p-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.4 }}
        >
          <div className="flex items-center space-x-3 mb-6">
            <Target className="h-6 w-6 text-purple-400" />
            <h4 className="text-xl font-bold text-white">AI Predictions & Forecasts</h4>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="bg-purple-600/20 border border-purple-500/50 p-6 rounded-lg">
              <div className="flex items-center space-x-2 mb-3">
                <TrendingUp className="h-5 w-5 text-purple-400" />
                <h5 className="font-semibold text-white">Demand Forecast</h5>
              </div>
              <p className="text-purple-100 text-sm">{insights.predictions.demandForecast}</p>
            </div>
            
            <div className="bg-blue-600/20 border border-blue-500/50 p-6 rounded-lg">
              <div className="flex items-center space-x-2 mb-3">
                <Zap className="h-5 w-5 text-blue-400" />
                <h5 className="font-semibold text-white">Stock Optimization</h5>
              </div>
              <p className="text-blue-100 text-sm">{insights.predictions.stockOptimization}</p>
            </div>
            
            <div className="bg-green-600/20 border border-green-500/50 p-6 rounded-lg">
              <div className="flex items-center space-x-2 mb-3">
                <CheckCircle className="h-5 w-5 text-green-400" />
                <h5 className="font-semibold text-white">Profitability</h5>
              </div>
              <p className="text-green-100 text-sm">{insights.predictions.profitability}</p>
            </div>
          </div>
        </motion.div>
      )}

      {/* Alerts */}
      {insights.alerts && insights.alerts.length > 0 && (
        <motion.div
          className="bg-gray-800/50 backdrop-blur-sm border border-gray-600 p-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.6 }}
        >
          <div className="flex items-center space-x-3 mb-6">
            <AlertTriangle className="h-6 w-6 text-orange-400" />
            <h4 className="text-xl font-bold text-white">Smart Alerts & Recommendations</h4>
          </div>
          
          <div className="space-y-4">
            {insights.alerts.map((alert, index) => (
              <motion.div
                key={index}
                className="flex items-start space-x-4 bg-gray-700/50 p-4 rounded-lg border border-gray-600"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.4, delay: 0.7 + index * 0.1 }}
              >
                <div className={`px-2 py-1 rounded text-xs font-semibold ${getPriorityColor(alert.priority)}`}>
                  {alert.priority.toUpperCase()}
                </div>
                <div className="flex-1">
                  <p className="text-white font-semibold mb-1">{alert.message}</p>
                  <p className="text-gray-300 text-sm">{alert.recommendation}</p>
                </div>
              </motion.div>
            ))}
          </div>
        </motion.div>
      )}
    </motion.div>
  );
};

export default AIInsights;